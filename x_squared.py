from scipy.stats import chi2_contingency, norm
import streamlit as st
from scipy.stats import chisquare
from scipy.stats import chi2_contingency
import numpy as np
import pandas as pd

tab1, tab2 = st.tabs(['Qui-quadrado 1', 'Qui-quadrado 2'])
with tab1:
    # Configura√ß√£o da p√°gina do Streamlit
    st.title("Teste Qui-Quadrado para Propor√ß√µes")
    st.write("""
    Este aplicativo calcula o teste qui-quadrado para verificar se h√° prefer√™ncia por uma posi√ß√£o espec√≠fica com base em suas observa√ß√µes. Al√©m disso, ele identifica quais posi√ß√µes se destacam significativamente como preferidas.
    """)

    # Entrada dos dados
    st.header("Insira os dados")
    st.write("Digite as frequ√™ncias observadas para cada posi√ß√£o abaixo:")

    # Caixas de entrada para as frequ√™ncias observadas
    positions = st.text_input(
        "Exemplo: 15, 0, 2, 0, 1 (valores separados por v√≠rgula)").strip()

    # Valida√ß√£o de entrada
    if positions:
        try:
            # Converte as entradas em uma lista de n√∫meros
            observed = list(map(int, positions.split(",")))
            total_choices = sum(observed)
            num_positions = len(observed)

            # Frequ√™ncias esperadas sob a hip√≥tese nula (distribui√ß√£o uniforme)
            expected = [total_choices / num_positions] * num_positions

            # Exibe os dados processados
            st.write(f"Frequ√™ncias observadas: {observed}")
            st.write(f"Frequ√™ncias esperadas (uniformes): {expected}")

            # C√°lculo do teste qui-quadrado
            chi2_stat, p_value = chisquare(f_obs=observed, f_exp=expected)

            # Resultados do teste
            st.subheader("Resultados do Teste Qui-Quadrado")
            st.write(f"Estat√≠stica qui-quadrado (œá¬≤): {chi2_stat:.4f}")
            st.write(f"Valor-p: {p_value:.4e}")

            # Interpreta√ß√£o do valor-p
            alpha = 0.05  # N√≠vel de signific√¢ncia
            if p_value < alpha:
                st.write(
                    "üö® **Conclus√£o**: Existe evid√™ncia estat√≠stica para rejeitar a hip√≥tese nula. "
                    "As escolhas n√£o foram feitas de forma uniforme, indicando prefer√™ncia por alguma posi√ß√£o."
                )
            else:
                st.write(
                    "‚úÖ **Conclus√£o**: N√£o h√° evid√™ncia estat√≠stica para rejeitar a hip√≥tese nula. "
                    "As escolhas podem ter sido feitas de forma uniforme."
                )

            # C√°lculo dos res√≠duos padronizados
            st.subheader("Res√≠duos Padronizados por Posi√ß√£o")
            residuals = [(obs - exp) / np.sqrt(exp)
                         for obs, exp in zip(observed, expected)]
            # Valor cr√≠tico para 5% de signific√¢ncia (95% de confian√ßa)
            critical_value = 1.96

            # Exibindo os res√≠duos e interpretando
            preferred_positions = []
            for i, res in enumerate(residuals):
                st.write(f"Posi√ß√£o {i + 1}: Res√≠duo padronizado = {res:.4f}")
                if res > critical_value:
                    st.write(
                        f"üëâ **A posi√ß√£o {i + 1} √© significativamente mais escolhida do que o esperado!**")
                    preferred_positions.append(i + 1)
                elif res < -critical_value:
                    st.write(
                        f"üëâ **A posi√ß√£o {i + 1} √© significativamente menos escolhida do que o esperado!**")

            # Conclus√£o geral sobre a posi√ß√£o preferida
            st.subheader("Conclus√£o sobre a Posi√ß√£o Preferida")
            if preferred_positions:
                st.write(f"üìå As seguintes posi√ß√µes foram identificadas como **preferidas**: {
                    ', '.join(map(str, preferred_positions))}")
            else:
                st.write(
                    "Nenhuma posi√ß√£o foi identificada como significativamente preferida ou menos preferida.")

        except ValueError:
            st.error("Por favor, insira valores inteiros separados por v√≠rgula.")
    else:
        st.info("Aguardando entrada de dados...")

    # Mensagem final
    st.write("---")
    st.write("Desenvolvido com ‚ù§Ô∏è usando Python e Streamlit.")
with tab2:
    import streamlit as st

# Configura√ß√£o do t√≠tulo
st.title("Compara√ß√£o de Propor√ß√µes entre Posi√ß√µes com An√°lise Post-hoc")
st.write("""
Este aplicativo calcula o teste qui-quadrado para verificar se h√° diferen√ßa nas propor√ß√µes de sucessos (premia√ß√µes) entre posi√ß√µes independentes. 
Al√©m disso, realiza uma an√°lise post-hoc para identificar quais posi√ß√µes apresentam propor√ß√µes significativamente diferentes.
""")

# Entrada dos dados
st.header("Insira os dados")
st.write("Digite os sucessos e os totais para cada posi√ß√£o:")

# Entrada de dados pelo usu√°rio
data_input = st.text_area(
    "Exemplo (formato: sucessos, totais por linha):\n15,15\n58,59\n46,49\n30,31", height=150)

if data_input:
    try:
        # Processando os dados de entrada
        data_lines = data_input.strip().split("\n")
        data = [list(map(int, line.split(","))) for line in data_lines]

        # Preparando os dados
        df = pd.DataFrame(data, columns=["Sucessos", "Totais"])
        df["Insucessos"] = df["Totais"] - df["Sucessos"]

        # Exibindo a tabela de entrada
        st.subheader("Dados Inseridos:")
        st.write(df)

        # Tabela de conting√™ncia
        contingency_table = df[["Sucessos", "Insucessos"]].values

        # C√°lculo do teste qui-quadrado
        chi2_stat, p_value, dof, expected = chi2_contingency(contingency_table)

        # Resultados do teste
        st.subheader("Resultados do Teste Qui-Quadrado")
        st.write(f"Estat√≠stica qui-quadrado (œá¬≤): {chi2_stat:.4f}")
        st.write(f"Graus de liberdade: {dof}")
        st.write(f"Valor-p: {p_value:.4e}")

        # Interpreta√ß√£o dos resultados
        alpha = 0.05  # N√≠vel de signific√¢ncia
        if p_value < alpha:
            st.write(
                "üö® **Conclus√£o**: Existe evid√™ncia estat√≠stica para rejeitar a hip√≥tese nula. "
                "As propor√ß√µes de sucessos (premia√ß√µes) n√£o s√£o iguais entre as posi√ß√µes."
            )
        else:
            st.write(
                "‚úÖ **Conclus√£o**: N√£o h√° evid√™ncia estat√≠stica para rejeitar a hip√≥tese nula. "
                "As propor√ß√µes de sucessos (premia√ß√µes) podem ser iguais entre as posi√ß√µes."
            )

        # Exibindo os valores esperados
        st.subheader("Frequ√™ncias Esperadas:")
        expected_df = pd.DataFrame(
            expected, columns=["Sucessos Esperados", "Insucessos Esperados"])
        st.write(expected_df)

        # An√°lise Post-hoc: Compara√ß√µes por pares usando teste z para propor√ß√µes
        st.subheader("An√°lise Post-hoc: Compara√ß√µes por Pares")

        # Obten√ß√£o das propor√ß√µes observadas
        proportions = df["Sucessos"] / df["Totais"]
        comparisons = []
        n_positions = len(df)

        # Compara√ß√£o entre todos os pares de posi√ß√µes
        for i in range(n_positions):
            for j in range(i + 1, n_positions):
                # Sucessos e totais das duas posi√ß√µes
                succ_i, total_i = df.loc[i, "Sucessos"], df.loc[i, "Totais"]
                succ_j, total_j = df.loc[j, "Sucessos"], df.loc[j, "Totais"]

                # Propor√ß√µes
                p_i, p_j = proportions[i], proportions[j]

                # Propor√ß√£o combinada (pooling)
                pooled_p = (succ_i + succ_j) / (total_i + total_j)

                # Estat√≠stica z
                z = (p_i - p_j) / np.sqrt(pooled_p *
                                          (1 - pooled_p) * (1 / total_i + 1 / total_j))

                # Valor-p bilateral
                p_val = 2 * (1 - norm.cdf(abs(z)))

                # Armazenar resultado
                comparisons.append({
                    "Posi√ß√£o 1": i + 1,
                    "Posi√ß√£o 2": j + 1,
                    "Propor√ß√£o 1": p_i,
                    "Propor√ß√£o 2": p_j,
                    "Estat√≠stica z": z,
                    "Valor-p": p_val
                })

        # Corre√ß√£o de Bonferroni para m√∫ltiplas compara√ß√µes
        comparisons_df = pd.DataFrame(comparisons)
        comparisons_df["Valor-p Ajustado (Bonferroni)"] = comparisons_df["Valor-p"] * len(
            comparisons_df)
        comparisons_df["Significativo (Ajustado)"] = comparisons_df["Valor-p Ajustado (Bonferroni)"] < alpha

        # Exibindo os resultados das compara√ß√µes
        st.write(comparisons_df)

        # Conclus√£o sobre as posi√ß√µes mais premiadas
        st.subheader("Conclus√£o sobre as Posi√ß√µes mais Premiadas")
        sig_differences = comparisons_df[comparisons_df["Significativo (Ajustado)"]]
        if not sig_differences.empty:
            st.write(
                "As seguintes compara√ß√µes apresentaram diferen√ßas significativas nas propor√ß√µes de premia√ß√£o:")
            for _, row in sig_differences.iterrows():
                st.write(f"- **Posi√ß√£o {int(row['Posi√ß√£o 1'])}** (Propor√ß√£o: {row['Propor√ß√£o 1']:.4f}) √© significativamente diferente de "
                         f"**Posi√ß√£o {int(row['Posi√ß√£o 2'])}** (Propor√ß√£o: {row['Propor√ß√£o 2']:.4f}).")
        else:
            st.write(
                "Nenhuma diferen√ßa significativa foi encontrada nas propor√ß√µes de premia√ß√£o ap√≥s o ajuste de Bonferroni.")

    except Exception as e:
        st.error("Erro ao processar os dados. Verifique o formato da entrada.")
else:
    st.info("Aguardando entrada de dados...")

# Mensagem final
st.write("---")
st.write("Desenvolvido com ‚ù§Ô∏è usando Python e Streamlit.")
